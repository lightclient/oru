# Prover
# ---
#
# The prover expects the calldata to look as follows:
# 
#  0  0x0000 +--------------+    
#            | Selector     |
#  1  0x0020 +--------------+ 
#            | Parent hash  |   ---+ 
#  2  0x0040 +--------------+      |
#            | Coinbase     |      |
#  3  0x0060 +--------------+      |
#            | State root   |      |
#  4  0x0080 +--------------+      |
#            | Receipt root |      |
#  5  0x00a0 +--------------+      |
#            | Bloom (oof)  |      |--- header fields
#  6  0x00c0 +--------------+      |
#            | Number       |      |
#  7  0x00e0 +--------------+      |
#            | Gas used     |      |
#  8  0x0100 +--------------+      |
#            | Time         |      |
#  9  0x0120 +--------------+      |
#            | Base fee     |   ---+
# 10  0x0140 +--------------+   
#            | Tx type      |   ---+
# 11  0x0160 +--------------+      |
#            | Chain ID     |      |  
# 12  0x0180 +--------------+      |
#            | Nonce        |      |
# 13  0x01a0 +--------------+      |
#            | Gas tip cap  |      |
# 14  0x01c0 +--------------+      |
#            | Gas fee cap  |      |
# 15  0x01e0 +--------------+      |
#            | Gas limit    |      |
# 16  0x0200 +--------------+      |
#            | To           |      |
# 17  0x0220 +--------------+      |--- transaction fields
#            | Value        |      |
# 18  0x0204 +--------------+      |
#            | Y parity     |      |
# 19  0x0260 +--------------+      |
#            | R            |      |
# 20  0x0280 +--------------+      |
#            | S            |      |
# 21  0x02a0 +--------------+      |
#            | Data length  |      |
# 22  0x02c0 +--------------+      |
#            | Proof length |      |
# 23  0x02e0 +--------------+      |
#            | Data         |      |
# 24  0x???? +--------------+      |
#            | Proof        |   ---+
# 25  0x???? +--------------+
#
#
#
# # Proving Fraud
#
# 1) Authenticate input -- the data passed in must be the same as what proposer
#    committed to.
#
#    * The header matches the header they committed to.
#    * The transaction matches the transaction they committed to.
#
# 2) Static validation -- perform the static validation before EVM execution. 
#
#    * The parent hash is valid
#    * The number was increment 1 over the previous block
#    * The gas used is less than the transaction's gas limit
#    * The base fee is calculated correctly given the parent block
#    * The tx type is supported
#    * The signature of the transaction is correct
#    * The proof authenticates against the parent state root
#
# 3) Dynamic validation -- perform the dynamic validation done by the EVM.


# # Memory Layout
#
# +---------------------+--------------------+------------+
# | constant sized data | dynamic sized data | evm frames |
# +---------------------+--------------------+------------+
# 
# The main idea is that we can segment the prover's memory layout into three
# regions: constant, dynamic, and execution stack. A key insight of the dynamic
# region is that it is dynamic only in terms of initialization. For example,
# it's unclear how much input data / proof data will be required for execution.
# That information is dynamic. However, once loaded, the size of the dynamic
# region is static. This allows us to avoid needing complex allocation
# mechanisms for when the region becomes full. The only region that grows
# dynamically during the execution of the proof is the evm frame stack
#
# ## Constant Sized Region
#
# The constant sized region store things that benefit from an absolute global
# location in memory.
#
# 0x0000	PC
# 0x0020	GAS LEFT
# 0x0040        FRAME DEPTH
# 0x0060        REFUND COUNTER
# 0x0080        TX ORIGIN
# 0x00a0	CODE PTR
# 0x00c0	FRAME PTR
# 0x00e0	HEADER START

# ...
#
#
# ## Dynamic Sized Region
#
# TBD
#
# ## EVM Frame Stack
#
# The EVM frame stack includes an initial constant sized header that tracks the
# machine state. It is followed by a dynamically sized portion of memory
# decicated to the memory of the executing frame.
#
# 0x0000	PC
# 0x0020	GAS LEFT
# 0x0040	MEMORY LENGTH
# 0x0060	ADDRESS
# 0x0080	CALLER
# 0x00a0	VALUE
# 0x00c0	CODE PTR
# 0x00e0	CODE LENGTH
# 0x0100	INPUT PTR
# 0x0120	INPUT LENGTH
# ...
#

%include("getters.etk")

# TODO: authenticate input
# TODO: static validation

# DYNAMIC VALIDATION

# Assume things like gas_left and tx origin have been initialized

# Initialize ##################################################################
calldatasize			# [calldatasize]
push1 0x00			# [0x00, calldatasize]
%get_header_start()		# [header_start, 0x00, calldatasize]
calldatacopy


# TODO: deduct intrinsic cost of tx
%get_tx_gas_limit()		# [gas_limit]
%ptr_current_gas_left()		# [gas_left_ptr, gas_limit]
mstore				# []

caller				# [fake_origin]
%ptr_tx_origin()		# [tx_origin_ptr, fake_origin]
mstore				# []
###############################################################################

# Initialize first EVM frame from tx inputs

# Set frame.gas_left
%ptr_current_gas_left()		# [ptr_gas_left]
mload				# [gas_left]
%ptr_frame()			# [ptr_frame, gas_left]
push1 0x20			# [0x20, ptr_frame, gas_left]
add				# [ptr_frame_gas_left, gas_left]
mstore				# []

# Set frame.address
%get_tx_to()			# [tx_to]
%ptr_frame()			# [ptr_frame, tx_to]
push1 0x60			# [0x60, ptr_frame, tx_to]
add				# [ptr_frame_addr, tx_to]
mstore				# []

# Set frame.caller
%ptr_tx_origin()		# [ptr_tx_origin]
mload				# [tx_origin]
%ptr_frame()			# [ptr_frame, tx_origin]
push1 0x80			# [0x60, ptr_frame, tx_origin]
add				# [ptr_frame_caller, tx_origin]
mstore				# []

# Set frame.value
%get_tx_value()			# [tx_value]
%ptr_frame()			# [ptr_frame, tx_value]
push1 0xa0			# [0x60, ptr_frame, tx_value]
add				# [ptr_frame_value, tx_value]
mstore				# []

# Set code.ptr
%get_data_len()			# [data_len]
push2 0x02e0			# [data_offset, data_len]
add				# [code_ptr]
%ptr_frame()			# [ptr_frame, code_ptr]
push1 0xc0			# [0xc0, ptr_frame, code_ptr]
add				# [ptr_frame_code_ptr, code_ptr]
mstore				# []

# Set code.len
%get_proof_len()		# [code_len]
%ptr_frame()			# [ptr_frame, code_len]
push1 0xe0			# [0xe0, ptr_frame, code_len]
add				# [ptr_frame_code_len, code_len]
mstore				# []

%macro increment_pc(amt)
	push1 0x00		# [pc_ptr]
	mload			# [pc]
	push1 $amt		# [$amt, pc]
	add			# [new_pc]
	push1 0x00		# [pc_ptr, new_pc]
	mstore			# []
%end

interpreter_loop:
	push1 0x00		# [pc_ptr]
	mload			# [pc]

	push1 0xa0		# [code_ptr, pc]
	add			# [op_ptr]
	mload			# [dirty_op]

	push32 0xff00000000000000000000000000000000000000000000000000000000000000 # [mask, dirty_op]
	and			# [op]

	# Stupid jump table for now
	dup1			# [op, op]
	push1 0x60		# [push1, op, op]
	eq			# [is_push1, op]
	push1 op_push1		# [impl, is_push1, op]
	jumpi			# [op]

	dup1			# [op, op]
	push1 0x01		# [add, op, op]
	eq			# [is_add, op]
	push1 op_add		# [impl, is_add, op]

	stop


# Instruction impls
op_push1:
	pop
	%get_pc()		# [pc]
	%ptr_current_code()	# [ptr_code, pc]
	add			# [ptr_op]
	push1 0x01		# [0x01, ptr_op]
	add			# [ptr_operand]
	mload			# [dirty_operand]
	push32 0xff00000000000000000000000000000000000000000000000000000000000000 # [mask, dirty_operand]
	and			# [operand]

	%increment_pc(2)
	push2 interpreter_loop
	jump 
	
op_add:
	pop
	add
	%increment_pc(1)
	push2 interpreter_loop
	jump 
